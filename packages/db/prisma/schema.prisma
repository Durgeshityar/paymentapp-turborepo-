// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model App_User {
  id                Int                  @id @default(autoincrement())
  name              String?
  phone             String?              @unique
  email             String               @unique
  password          String
  onRampTransaction onRampTransactions[]
  Balance           Balance[]
  sentTransfers     p2pTransfer[]        @relation(name: "FromUserRelation")
  receivedTransfers p2pTransfer[]        @relation(name: "ToUserRelation")
}

model Merchant {
  id       Int     @id @default(autoincrement())
  name     String?
  phone    String? @unique
  email    String  @unique
  password String
}

model Balance {
  id     Int      @id @default(autoincrement())
  userId Int      @unique
  amount Int
  locked Int
  user   App_User @relation(fields: [userId], references: [id])
}

model onRampTransactions {
  id        Int          @id @default(autoincrement())
  status    onRampStatus
  token     String
  provider  String
  amount    Int
  startTime DateTime
  userId    Int
  user      App_User     @relation(fields: [userId], references: [id])
}

enum onRampStatus {
  success
  Failure
  Processing
}

model p2pTransfer {
  id         Int      @id @default(autoincrement())
  amount     Int
  timestamp  DateTime
  fromUserId Int
  fromUser   App_User @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId   Int
  toUser     App_User @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
}
